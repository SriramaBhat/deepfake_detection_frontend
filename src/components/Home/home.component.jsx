import React, { useState, useContext, useRef } from "react";
import { useDropzone } from "react-dropzone";

import { UserContext } from "../../context/user.context";
import FadeInSection from "../fade-in-section/fade-in";
import loading from "../../assets/loading.gif";
import uploadLogo from "../../assets/upload.png";
import imageLogo from "../../assets/image.png";
import audioLogo from "../../assets/audio.png";
import textLogo from "../../assets/text.png";
import errorLogo from "../../assets/error.png";
import modi from "../../assets/contributors/hardik.jpg";
import kevin from "../../assets/contributors/kevin.jpg";
import sriram from "../../assets/contributors/srirama.jpg";
import yashas from "../../assets/contributors/yashas.jpg";
import architechture from "../../assets/methodology.png";

// import highProb from "../../assets/highProb.png";
// import midProb from "../../assets/midProb.png";
// import lowProb from "../../assets/highProb.png";
import "./home.styles.scss";
import Modal from "../Modal/Modal";

const Home = () => {
  const { currentUser } = useContext(UserContext);
  const dialog = useRef();
  const [uploadedFile, setUploadedFile] = useState(null);
  const [probabilityOfDeepfake, setProbabilityOfDeepfake] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");
  const { getRootProps, getInputProps } = useDropzone({
    onDrop: (acceptedFile) => {
      setUploadedFile(acceptedFile);
    },
  });

  const uploadFileToBackend = async () => {
    if (!currentUser) {
      setError("Not Authorized");
      dialog.current.showModal();
    } else {
      try {
        if (!uploadedFile) {
          setError("No file uploaded");
          dialog.current.showModal();
        } else {
          const fileName = uploadedFile[0].name;
          const allowedExtensions = [
            "txt",
            "pdf",
            "docx",
            "jpeg",
            "jpg",
            "png",
            "wav",
            "mp3",
            "ogg",
          ];
          const extension = fileName.substring(fileName.lastIndexOf(".") + 1);
          if (!allowedExtensions.includes(extension)) {
            setError("Extension not supported");
            dialog.current.showModal();
          } else {
            var data = new FormData();
            data.append("file", uploadedFile[0]);
            setIsLoading(true);
            const url = process.env.REACT_APP_SERVER ? process.env.SERVER : "http://localhost:5000/predict";
            console.log(url);
            const response = await fetch(url, {
              method: "POST",
              body: data,
            });
            const response_data = await response.json();
            setIsLoading(false);
            setProbabilityOfDeepfake(response_data["prediction"]);
          }
        }
      } catch (error) {
        console.log(error);
        setIsLoading(false);
        setError("Server Error, please try later");
        dialog.current.showModal();
      }
    }
  };

  return (
    <div className="home">
      <Modal ref={dialog} message={error} />
      <section className="analyzer-container">
        <div className="about-project">
          <FadeInSection>
            <div className="about-container">
              <h2>Welcome to Veritasium!</h2>
              <h3>
                <div className="wrapper">
                  <ul className="dynamic-txt">
                    <li>
                      <span>Trust, Transparency, Veritasium</span>
                    </li>
                    <li>
                      <span> Seamless Content Verification</span>
                    </li>
                    <li>
                      <span>Thorough Analysis, Instant Results</span>
                    </li>
                  </ul>
                </div>
              </h3>
              <p className="just">
                Our website employs advanced algorithms to determine whether an
                audio clip, text, or image has been generated by artificial
                intelligence. Easy to use and accessible, simply upload your
                file, and we'll provide you with a quick analysis, letting you
                know if it's AI-generated or not.
              </p>
            </div>
          </FadeInSection>
        </div>
        <div className="analyzer">
          <div className="view">
            <div {...getRootProps()}>
              <div>
                {!uploadedFile ? (
                  <img src={uploadLogo} alt="Upload logo" />
                ) : (
                  (() => {
                    const extension = uploadedFile[0].name.substring(
                      uploadedFile[0].name.lastIndexOf(".") + 1
                    );
                    if (
                      extension === "pdf" ||
                      extension === "txt" ||
                      extension === "docx"
                    ) {
                      return <img src={textLogo} alt="Text File Logo" />;
                    } else if (
                      extension === "png" ||
                      extension === "jpg" ||
                      extension === "jpeg"
                    ) {
                      return (
                        <img src={imageLogo} id="imglogo" alt="Img File Logo" />
                      );
                    } else if (
                      extension === "mp3" ||
                      extension === "ogg" ||
                      extension === "wav"
                    ) {
                      return <img src={audioLogo} alt="Audio File Logo" />;
                    } else {
                      return (
                        <img src={errorLogo} id="error" alt="Error Logo" />
                      );
                    }
                  })()
                )}
              </div>
              <ul>
                {!uploadedFile ? (
                  <li></li>
                ) : (
                  <li key={uploadedFile[0].name}>{uploadedFile[0].name}</li>
                )}
              </ul>
              <input id="file_upload" {...getInputProps()} />
              <p>Drag and drop files here or click to browse.</p>
            </div>
          </div>
          <div className="result-container">
            <div className="result">
              <p>Deepfake Probability:</p>
              {isLoading && <img src={loading} alt="Loading Animaation"/>}
              {probabilityOfDeepfake && (
                <p
                  id="probability"
                  style={
                    Number(probabilityOfDeepfake) < 50
                      ? { color: "limegreen" }
                      : Number(probabilityOfDeepfake) < 85
                      ? { color: "#FFCC00" }
                      : { color: "#CC1100" }
                  }
                >
                  {Number(probabilityOfDeepfake).toFixed(2)}%
                </p>
              )}
            </div>
            <button onClick={uploadFileToBackend} className="standard_button">
              Upload
            </button>
          </div>
        </div>
      </section>
      <FadeInSection>
        <section className="about-us" id="about-us">
          <h2>About Us</h2>
          <p className="text">
            In the current age, the widespread availability of advanced AI
            technologies has given rise to a serious issue that needs to be
            addressed, i.e., the proliferation of Deepfake content. Deepfakes
            are media, typically generated by deep learning algorithms such as
            CNNs, Generative Adversarial Networks (GANs), and its variants,
            which can convincingly manipulate or replace visual and audio
            elements in videos, audio recordings, and images
          </p>

          <p className="text1">
            This project aims to address this growing challenge of identifying
            and mitigating the impact of DeepFake content. This project has an
            objective to leverage cutting-edge artificial intelligence and
            machine learning techniques to develop a robust and efficient system
            for detecting DeepFake content across various media formats.
          </p>
          <div className="images">
            <article>
              <img src={sriram} alt="Srirama Bhat" width="219px"></img>
              <h3>Srirama Bhat</h3>
            </article>
            <article>
              <img src={modi} alt="Hardik Modi" width="220px"></img>
              <h3>Hardik Modi</h3>
            </article>
            <article>
              <img src={kevin} alt="Kevin Thomas" width="190px"></img>
              <h3>Kevin Thomas</h3>
            </article>
            <article>
              <img src={yashas} alt="Yashas Manjunath" width="185px"></img>
              <h3>Yashas B Manjunath</h3>
            </article>
          </div>
        </section>
      </FadeInSection>
      <FadeInSection>
        <div id="methadology" className="methodology-section">
          <h2>Our Methodology</h2>
          <p>
            Our methodology revolves around advanced AI analysis and a rigorous
            examination process to determine the authenticity of digital
            content. File Upload: Users can simply upload their files through
            our user-friendly interface. Veritasium supports various file
            formats, allowing you to analyze text, images, and audio content. AI
            Analysis: Our platform utilizes deep learning models to scrutinize
            the uploaded content. We leverage sophisticated algorithms that have
            been trained to distinguish between human-generated and AI-generated
            content. Verification Result: After a comprehensive analysis, Our
            project provides a clear and concise verification result. Users
            receive detailed insights into whether the file is likely to be
            generated by AI.
          </p>
          <img
            src={architechture}
            alt="Methodology"
            className="methodology-image"
          />
        </div>
      </FadeInSection>
      <div className="footer">
        <p></p>
      </div>
    </div>
  );
};

export default Home;
